import { type CreateListenerOptions, type DialOptions, symbol, type Transport, type Listener, type Upgrader } from '@libp2p/interface/transport';
import { type Multiaddr } from '@multiformats/multiaddr';
import type { DataChannelOpts } from '../stream.js';
import type { Connection } from '@libp2p/interface/connection';
import type { PeerId } from '@libp2p/interface/peer-id';
import type { CounterGroup, Metrics } from '@libp2p/interface/src/metrics/index.js';
import type { Startable } from '@libp2p/interface/startable';
import type { IncomingStreamData, Registrar } from '@libp2p/interface-internal/registrar';
import type { TransportManager } from '@libp2p/interface-internal/transport-manager';
export interface WebRTCTransportInit {
    rtcConfiguration?: RTCConfiguration;
    dataChannel?: Partial<DataChannelOpts>;
}
export interface WebRTCTransportComponents {
    peerId: PeerId;
    registrar: Registrar;
    upgrader: Upgrader;
    transportManager: TransportManager;
    metrics?: Metrics;
}
export interface WebRTCTransportMetrics {
    dialerEvents: CounterGroup;
    listenerEvents: CounterGroup;
}
export declare class WebRTCTransport implements Transport, Startable {
    private readonly components;
    private readonly init;
    private _started;
    private readonly metrics?;
    constructor(components: WebRTCTransportComponents, init?: WebRTCTransportInit);
    isStarted(): boolean;
    start(): Promise<void>;
    stop(): Promise<void>;
    createListener(options: CreateListenerOptions): Listener;
    readonly [Symbol.toStringTag] = "@libp2p/webrtc";
    readonly [symbol] = true;
    filter(multiaddrs: Multiaddr[]): Multiaddr[];
    dial(ma: Multiaddr, options: DialOptions): Promise<Connection>;
    _onProtocol({ connection, stream }: IncomingStreamData): Promise<void>;
}
export declare function splitAddr(ma: Multiaddr): {
    baseAddr: Multiaddr;
    peerId: PeerId;
};
//# sourceMappingURL=transport.d.ts.map