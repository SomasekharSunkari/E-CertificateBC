import { AbstractStream, type AbstractStreamInit } from '@libp2p/interface/stream-muxer/stream';
import { Uint8ArrayList } from 'uint8arraylist';
import type { Direction } from '@libp2p/interface/connection';
export interface DataChannelOpts {
    maxMessageSize: number;
    maxBufferedAmount: number;
    bufferedAmountLowEventTimeout: number;
}
export interface WebRTCStreamInit extends AbstractStreamInit {
    /**
     * The network channel used for bidirectional peer-to-peer transfers of
     * arbitrary data
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}
     */
    channel: RTCDataChannel;
    dataChannelOptions?: Partial<DataChannelOpts>;
    maxDataSize: number;
}
export declare const MAX_MESSAGE_SIZE: number;
export declare const MAX_BUFFERED_AMOUNT: number;
export declare const BUFFERED_AMOUNT_LOW_TIMEOUT: number;
export declare const PROTOBUF_OVERHEAD = 5;
export declare const VARINT_LENGTH = 2;
export declare class WebRTCStream extends AbstractStream {
    /**
     * The data channel used to send and receive data
     */
    private readonly channel;
    /**
     * Data channel options
     */
    private readonly dataChannelOptions;
    /**
     * push data from the underlying datachannel to the length prefix decoder
     * and then the protobuf decoder.
     */
    private readonly incomingData;
    private messageQueue?;
    /**
     * The maximum size of a message in bytes
     */
    private readonly maxDataSize;
    constructor(init: WebRTCStreamInit);
    sendNewStream(): void;
    _sendMessage(data: Uint8ArrayList, checkBuffer?: boolean): Promise<void>;
    sendData(data: Uint8ArrayList): Promise<void>;
    sendReset(): Promise<void>;
    sendCloseWrite(): Promise<void>;
    sendCloseRead(): Promise<void>;
    /**
     * Handle incoming
     */
    private processIncomingProtobuf;
    private _sendFlag;
}
export interface WebRTCStreamOptions {
    /**
     * The network channel used for bidirectional peer-to-peer transfers of
     * arbitrary data
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}
     */
    channel: RTCDataChannel;
    /**
     * The stream direction
     */
    direction: Direction;
    dataChannelOptions?: Partial<DataChannelOpts>;
    maxMsgSize?: number;
    onEnd?: (err?: Error | undefined) => void;
}
export declare function createStream(options: WebRTCStreamOptions): WebRTCStream;
//# sourceMappingURL=stream.d.ts.map